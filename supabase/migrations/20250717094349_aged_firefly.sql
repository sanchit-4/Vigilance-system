/*
  # Complete Database Schema Setup

  This migration creates all the necessary tables and relationships for the guard management system.

  ## New Tables Created:
  1. **guards** - Store guard information including personal details, salary, and status
  2. **clients** - Store client/customer information
  3. **locations** - Store site locations with geofencing data, linked to clients
  4. **inventory_items** - Store inventory items that can be assigned to guards
  5. **attendance** - Store attendance records with geofencing verification
  6. **salary_advances** - Track salary advances given to guards
  7. **guard_assignments** - Track guard assignments to locations
  8. **assigned_inventory** - Track inventory items assigned to guards

  ## Security
  - Enable RLS on all tables
  - Add policies for authenticated users to perform CRUD operations
  - Ensure data integrity with foreign key constraints

  ## Key Features
  - Geofencing support for attendance verification
  - Inventory management and tracking
  - Salary advance management
  - Police verification status tracking
  - Comprehensive attendance logging with approval workflow
*/

-- Create guards table
CREATE TABLE IF NOT EXISTS public.guards (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    name TEXT NOT NULL,
    address TEXT,
    date_of_birth DATE,
    date_of_joining DATE NOT NULL,
    police_verification_status TEXT NOT NULL DEFAULT 'Pending' CHECK (police_verification_status IN ('Pending', 'Verified', 'Rejected')),
    category TEXT NOT NULL DEFAULT 'Guard' CHECK (category IN ('Guard', 'Gunman', 'Supervisor', 'Security Officer', 'Lady Guard')),
    date_of_exit DATE,
    contact_info TEXT,
    base_salary NUMERIC NOT NULL DEFAULT 3000,
    is_active BOOLEAN NOT NULL DEFAULT TRUE
);

-- Create clients table
CREATE TABLE IF NOT EXISTS public.clients (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    name TEXT NOT NULL,
    address TEXT,
    phone_1 TEXT,
    phone_2 TEXT
);

-- Create locations table
CREATE TABLE IF NOT EXISTS public.locations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    client_id BIGINT NOT NULL REFERENCES public.clients(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    site_name TEXT NOT NULL,
    address TEXT,
    latitude NUMERIC NOT NULL,
    longitude NUMERIC NOT NULL,
    geofence_radius_meters NUMERIC NOT NULL DEFAULT 100
);

-- Create inventory_items table
CREATE TABLE IF NOT EXISTS public.inventory_items (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    item_name TEXT NOT NULL,
    value NUMERIC NOT NULL DEFAULT 0
);

-- Create attendance table
CREATE TABLE IF NOT EXISTS public.attendance (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    guard_id BIGINT NOT NULL REFERENCES public.guards(id) ON DELETE CASCADE,
    location_id BIGINT NOT NULL REFERENCES public.locations(id) ON DELETE CASCADE,
    check_in_time TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
    is_within_geofence BOOLEAN NOT NULL DEFAULT FALSE,
    status TEXT NOT NULL DEFAULT 'Pending Approval' CHECK (status IN ('Pending Approval', 'Approved', 'Rejected')),
    confirmed_by_supervisor_id BIGINT REFERENCES public.guards(id),
    confirmation_timestamp TIMESTAMP WITH TIME ZONE
);

-- Create salary_advances table
CREATE TABLE IF NOT EXISTS public.salary_advances (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    guard_id BIGINT NOT NULL REFERENCES public.guards(id) ON DELETE CASCADE,
    amount NUMERIC NOT NULL DEFAULT 0,
    advance_date DATE NOT NULL DEFAULT CURRENT_DATE,
    recovery_amount_per_period NUMERIC NOT NULL DEFAULT 0,
    is_fully_recovered BOOLEAN NOT NULL DEFAULT FALSE
);

-- Create guard_assignments table
CREATE TABLE IF NOT EXISTS public.guard_assignments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    guard_id BIGINT NOT NULL REFERENCES public.guards(id) ON DELETE CASCADE,
    location_id BIGINT NOT NULL REFERENCES public.locations(id) ON DELETE CASCADE,
    assignment_date DATE NOT NULL DEFAULT CURRENT_DATE
);

-- Create assigned_inventory table
CREATE TABLE IF NOT EXISTS public.assigned_inventory (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    guard_id BIGINT NOT NULL REFERENCES public.guards(id) ON DELETE CASCADE,
    item_id BIGINT NOT NULL REFERENCES public.inventory_items(id) ON DELETE CASCADE,
    assigned_date DATE NOT NULL DEFAULT CURRENT_DATE,
    status TEXT NOT NULL DEFAULT 'Issued' CHECK (status IN ('Issued', 'Lost', 'Damaged', 'Returned')),
    notes TEXT
);

-- Enable Row Level Security on all tables
ALTER TABLE public.guards ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.clients ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.locations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.inventory_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.attendance ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.salary_advances ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.guard_assignments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.assigned_inventory ENABLE ROW LEVEL SECURITY;

-- Create policies for authenticated users to perform CRUD operations
CREATE POLICY "Authenticated users can manage guards"
    ON public.guards
    FOR ALL
    TO authenticated
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Authenticated users can manage clients"
    ON public.clients
    FOR ALL
    TO authenticated
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Authenticated users can manage locations"
    ON public.locations
    FOR ALL
    TO authenticated
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Authenticated users can manage inventory_items"
    ON public.inventory_items
    FOR ALL
    TO authenticated
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Authenticated users can manage attendance"
    ON public.attendance
    FOR ALL
    TO authenticated
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Authenticated users can manage salary_advances"
    ON public.salary_advances
    FOR ALL
    TO authenticated
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Authenticated users can manage guard_assignments"
    ON public.guard_assignments
    FOR ALL
    TO authenticated
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Authenticated users can manage assigned_inventory"
    ON public.assigned_inventory
    FOR ALL
    TO authenticated
    USING (true)
    WITH CHECK (true);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_guards_active ON public.guards(is_active);
CREATE INDEX IF NOT EXISTS idx_locations_client_id ON public.locations(client_id);
CREATE INDEX IF NOT EXISTS idx_attendance_guard_id ON public.attendance(guard_id);
CREATE INDEX IF NOT EXISTS idx_attendance_location_id ON public.attendance(location_id);
CREATE INDEX IF NOT EXISTS idx_attendance_status ON public.attendance(status);
CREATE INDEX IF NOT EXISTS idx_attendance_check_in_time ON public.attendance(check_in_time);
CREATE INDEX IF NOT EXISTS idx_salary_advances_guard_id ON public.salary_advances(guard_id);
CREATE INDEX IF NOT EXISTS idx_assigned_inventory_guard_id ON public.assigned_inventory(guard_id);
CREATE INDEX IF NOT EXISTS idx_assigned_inventory_item_id ON public.assigned_inventory(item_id);